function [echolocation_idxs] = ImBat_MCS_extract_echolocations(audioConCat)

% Break audio into 2minute segments. Analyze each segment. Poop out the
% vector of peaks. NON-Downsampled.

fs = 192000; ds_factor=10;
seconds = size(audioConCat,1)/fs;
two_minutes = ceil(seconds/120);
echolocation_idxs = [];

for i=1:two_minutes
    clear pks locs;
    if i==two_minutes-1
        short_seg = audioConCat(120*(i-1)*fs+1:end);
    else
        short_seg = audioConCat(120*(i-1)*fs+1:(120*(i-1)+120)*fs);
    end
    %figure(); hold on; plot(short_seg); title("Manually selected audio subsegment");
    
    % Remove infinite values
    if num2str(max(short_seg)) == '1'
        infinite_values = find(short_seg == max(short_seg));
        ii = NaN(size(short_seg,1),1);
        ii(infinite_values) = 0.5;
        %figure(); hold on; plot(short_seg); plot(ii,'*r');
        short_seg(infinite_values) = 0;
    end
    
    % Extract peaks from NON-downsampled audio using bandpass filter and RMS
    % threshold.
    [b,a]=butter(8,2*[40e3 80e3]./fs,'bandpass');
    conv_mic_data=filter(b,a,short_seg);
    RMS_mic_data = zscore(zftftb_rms(conv_mic_data',fs));
    RMS_mic_data(RMS_mic_data<4) = 0;
    % Get peak locations from RMS
    [pks,locs] = findpeaks(RMS_mic_data,'MinPeakProminence',2.5);
    % Make binary vector of peaks
    pkvect = NaN(1,length(short_seg));
    pkvect(locs) = 0.01;
%     figure(); hold on; plot(short_seg);
%     plot(pkvect,'*r');
    %plot(conv_mic_data);

    % #-part spectrogram plot
%     figure(); % make spectrogram..
%     ax1 = subplot(3,1,1)
% 
%     [b,a]=ellip(5,.2,80,[100]/(fs/2),'high'); 
%     %[b,a]=ellip(5,.2,80,[3515]/(fs/2),'high'); % filter above 3515
%     [IMAGE,F,T] = fb_pretty_sonogram(filtfilt(b,a,short_seg./abs(max(short_seg))),fs,'low',2.9,'zeropad',0);
%     colormap(hot)
%     imagesc(T,F,log(abs(IMAGE)+1e+2));set(gca,'YDir','normal');
%     ylabel('kHz')
%     xlabel('time (s)');
%     title('Spectrogram of manually selected audio subsegment');
% 
%     % now plot RMS below
%     [b,a]=butter(8,2*[40e3 80e3]./fs,'bandpass');
%     convy=filter(b,a,short_seg);
%     temp1 = zscore(zftftb_rms(convy',fs))*500;
%     temp1(temp1<10) = 0; % get rid of filter artifacts..
%     hold on;
% 
%     ax2 = subplot(3,1,2);
%     plot((30:size(temp1,2))/fs,temp1(30:end),'b','LineWidth',3)
%     %linkaxes([ax1,ax2],'x'); axis tight
% 
%     % plot the OG data
%     ax3 = subplot(3,1,3); hold on; 
%     plot((30:size(temp1,2))/fs,short_seg(30:end)); plot((30:size(temp1,2))/fs,pkvect(30:end),'*r');
%     %plot(pk_vect,'*r'); 
%     linkaxes([ax1,ax2,ax3],'x'); axis tight

    % Listen to segment:
    %sound(short_seg*3, fs);
    
    % Re-align the locations to be for the full vector
    locs = locs + (i-1)*120*fs;
    echolocation_idxs = [echolocation_idxs,locs];

end